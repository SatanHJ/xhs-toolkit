name: 🚀 构建和发布小红书MCP工具包

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发（如 v1.0.0）
    branches:
      - main  # 推送到main分支时进行构建测试
  pull_request:
    branches: [ main ]

# 添加必要的权限
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================
  # 代码质量检查
  # ============================================
  lint-and-test:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: 🔍 代码风格检查
      run: |
        # 跳过长行和一些常见警告
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: ✅ 语法检查
      run: |
        python -m py_compile xhs_mcp_server.py
        python -m py_compile xhs_toolkit.py  
        python -m py_compile cookie_helper.py

  # ============================================
  # 多平台构建
  # ============================================
  build:
    name: 🔨 构建 ${{ matrix.os }}
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: xhs-toolkit-linux-x64
            setup_cmd: |
              sudo apt-get update
              sudo apt-get install -y wget unzip xvfb
              
          - os: windows-latest  
            platform: windows
            arch: x64
            binary_name: xhs-toolkit-windows-x64.exe
            setup_cmd: |
              # Windows平台暂不安装Chrome（用户自行安装）
              echo "Windows platform setup"
              
          - os: macos-latest
            platform: macos
            arch: x64  
            binary_name: xhs-toolkit-macos-x64
            setup_cmd: |
              # macOS平台暂不安装Chrome（用户自行安装）
              echo "macOS platform setup"
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 🔧 平台特定设置
      run: ${{ matrix.setup_cmd }}
      shell: bash
      
    - name: 📦 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 🔨 构建可执行文件
      run: |
        pyinstaller \
          --onefile \
          --name ${{ matrix.binary_name }} \
          --add-data "env_example.txt:." \
          --hidden-import dotenv \
          --hidden-import selenium \
          --hidden-import selenium.webdriver \
          --hidden-import selenium.webdriver.chrome.service \
          --hidden-import fastmcp \
          --hidden-import loguru \
          --hidden-import pydantic \
          --console \
          xhs_toolkit.py
      shell: bash
      
    - name: 🔍 检查构建结果
      run: |
        echo "📁 构建目录结构:"
        find dist/ -type f
        echo "📦 可执行文件信息:"
        ls -la dist/
      shell: bash
      
    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary_name }}
        path: |
          dist/${{ matrix.binary_name }}*
          env_example.txt
          README.md
          LICENSE
        retention-days: 7

  # ============================================
  # 创建发布版本
  # ============================================
  release:
    name: 🎉 创建Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # 只在版本标签时创建release
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 📥 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: 📦 打包发布文件
      run: |
        mkdir -p release/
        
        # 检查下载的artifact结构
        echo "📋 Artifact结构检查:"
        find artifacts/ -type f | head -20
        
        # 为每个平台创建压缩包
        cd artifacts/
        
        # Linux
        if [ -d "xhs-toolkit-linux-x64" ]; then
          mkdir -p linux-package
          # 查找Linux可执行文件
          if [ -f "xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          elif [ -f "xhs-toolkit-linux-x64/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          else
            echo "❌ Linux可执行文件未找到"
            find xhs-toolkit-linux-x64/ -name "*linux*" -type f
          fi
          cp xhs-toolkit-linux-x64/{env_example.txt,README.md,LICENSE} linux-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-linux-x64.tar.gz -C linux-package .
        fi
        
        # Windows  
        if [ -d "xhs-toolkit-windows-x64.exe" ]; then
          mkdir -p windows-package
          # 查找Windows可执行文件
          if [ -f "xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          elif [ -f "xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          else
            echo "❌ Windows可执行文件未找到"
            find xhs-toolkit-windows-x64.exe/ -name "*windows*" -type f
          fi
          cp xhs-toolkit-windows-x64.exe/{env_example.txt,README.md,LICENSE} windows-package/ 2>/dev/null || true
          cd windows-package && zip -r ../../release/xhs-toolkit-windows-x64.zip . && cd ..
        fi
        
        # macOS
        if [ -d "xhs-toolkit-macos-x64" ]; then
          mkdir -p macos-package  
          # 查找macOS可执行文件
          if [ -f "xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          elif [ -f "xhs-toolkit-macos-x64/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          else
            echo "❌ macOS可执行文件未找到"
            find xhs-toolkit-macos-x64/ -name "*macos*" -type f
          fi
          cp xhs-toolkit-macos-x64/{env_example.txt,README.md,LICENSE} macos-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-macos-x64.tar.gz -C macos-package .
        fi
        
        cd ../
        echo "📦 最终发布文件:"
        ls -la release/
        
    - name: 📝 生成发布说明
      run: |
        cat > release-notes.md << 'EOF'
        ## 🌺 小红书MCP工具包 ${{ github.ref_name }}
        
        ### ✨ 新特性
        - 支持小红书图文笔记自动发布
        - 完整的MCP协议支持，与Claude Desktop无缝集成
        - 智能Cookie管理和验证
        - 多平台二进制文件支持
        
        ### 📋 功能清单
        - [x] **图文发布** - 支持发布文字和图片笔记
        - [x] **Cookie管理** - 安全获取、验证和管理登录凭证
        - [x] **MCP协议支持** - 与AI客户端完美集成
        - [x] **内容搜索** - 批量搜索和分析笔记
        - [x] **用户信息** - 获取用户档案和数据分析
        - [ ] **视频发布** - 支持发布视频笔记（开发中）
        
        ### 🚀 快速开始
        
        1. **下载对应平台的文件**
        2. **解压到任意目录**
        3. **复制配置文件**: `cp env_example.txt .env`
        4. **编辑配置**: 填入Chrome路径、ChromeDriver路径和手机号
        5. **获取登录凭证**: `./xhs-toolkit cookie save`
        6. **启动MCP服务**: `./xhs-toolkit server start`
        
        ### 📦 下载说明
        
        | 平台 | 文件 | 说明 |
        |------|------|------|
        | 🐧 Linux | `xhs-toolkit-linux-x64.tar.gz` | 适用于x64 Linux系统 |
        | 🪟 Windows | `xhs-toolkit-windows-x64.zip` | 适用于x64 Windows系统 |
        | 🍎 macOS | `xhs-toolkit-macos-x64.tar.gz` | 适用于Intel Mac |
        
        ### ⚠️ 使用要求
        
        - **Chrome浏览器**: 必须安装Google Chrome
        - **ChromeDriver**: 需要安装匹配版本的ChromeDriver
        - **网络连接**: 需要能够访问小红书网站
        - **配置文件**: 必须正确配置.env文件
        
        ### 🔗 相关链接
        
        - [📖 完整文档](https://github.com/aki66938/xiaohongshu-mcp-toolkit/blob/main/README.md)
        - [🐛 问题反馈](https://github.com/aki66938/xiaohongshu-mcp-toolkit/issues)
        - [💬 讨论交流](https://github.com/aki66938/xiaohongshu-mcp-toolkit/discussions)
        
        ---
        
        **Made with ❤️ for content creators**
        EOF
        
    - name: 🎉 创建GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 检查GitHub CLI是否可用
        gh --version
        
        # 检查Token权限
        echo "🔑 检查GitHub Token权限..."
        gh auth status
        
        # 检查要上传的文件
        echo "📦 要上传的文件列表:"
        find release/ -type f -exec ls -la {} \;
        
        # 创建Release
        echo "🚀 创建GitHub Release..."
        gh release create "${{ github.ref_name }}" \
          --title "小红书MCP工具包 ${{ github.ref_name }}" \
          --notes-file release-notes.md \
          --draft=false \
          --prerelease=false \
          release/*
        
    - name: 📊 发布完成通知
      run: |
        echo "🎉 Release ${{ github.ref_name }} 创建成功!"
        echo "📦 包含以下文件:"
        ls -la release/
        echo "🔗 访问地址: https://github.com/aki66938/xhs-toolkit/releases/tag/${{ github.ref_name }}" 